// Generated by CoffeeScript 1.4.0
(function() {
  var DOMAIN, TOKEN, database, departments, departments_fetched, departments_received, dept_reviews, depts_callback, get_json, revs_callback;

  DOMAIN = 'http://api.penncoursereview.com/v1/';

  TOKEN = 'public';

  get_json = function(path, callback, options) {
    var _this = this;
    return $.get("" + DOMAIN + path + "?token=" + TOKEN, function(data) {
      data = JSON.parse(data).result;
      return callback(data, options);
    });
  };

  departments = function(callback, options) {
    var path;
    path = 'depts/';
    return get_json(path, callback, options);
  };

  dept_reviews = function(did, callback, options) {
    var path;
    path = "depts/" + did + "/reviews";
    return get_json(path, callback, options);
  };

  database = {};

  departments_received = 0;

  revs_callback = function(data, options) {
    var c, category, course, courses, dept, dept_name, name, obj, val, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    departments_received++;
    dept_name = options.dept;
    dept = database[dept_name];
    _ref = data.values;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      courses = (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = obj.section.aliases;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          if (c.indexOf(dept_name) === 0) {
            _results.push(c.split('-')[1]);
          }
        }
        return _results;
      })();
      for (_j = 0, _len1 = courses.length; _j < _len1; _j++) {
        course = courses[_j];
        if (!dept[course]) {
          dept[course] = {
            reviews: [],
            totals: {},
            averages: {}
          };
        }
        c = dept[course];
        c.reviews.push(obj.ratings);
        _ref1 = obj.ratings;
        for (category in _ref1) {
          val = _ref1[category];
          if (!(category in c.totals)) {
            c.totals[category] = {
              sum: 0,
              num: 0
            };
          }
          c.totals[category].sum += parseFloat(val);
          c.totals[category].num++;
        }
      }
    }
    dept.num = 0;
    for (name in dept) {
      c = dept[name];
      _ref2 = c.totals;
      for (category in _ref2) {
        val = _ref2[category];
        c.averages[category] = val.sum / val.num;
        if (!(category in dept.totals)) {
          dept.totals[category] = {
            sum: 0,
            num: 0
          };
        }
        dept.totals[category].sum += c.averages[category];
        dept.totals[category].num++;
      }
      delete c.totals;
      delete c.reviews;
      dept.num++;
    }
    dept.num -= 4;
    _ref3 = dept.totals;
    for (category in _ref3) {
      val = _ref3[category];
      dept.averages[category] = val.sum / val.num;
    }
    delete dept.totals;
    db.update(_.pick(database, dept_name));
    if (departments_fetched === departments_received) {
      return console.log("Done: " + departments_received + " departments processed");
    }
  };

  departments_fetched = 0;

  depts_callback = function(data, options) {
    var d, _i, _len, _ref, _results;
    if (options == null) {
      options = {};
    }
    _ref = data.values;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      if (!(d.id in database)) {
        departments_fetched++;
        options.dept = d.id;
        database[d.id] = {
          totals: {},
          averages: {},
          name: d.name
        };
        _results.push(dept_reviews(d.id, revs_callback, _.clone(options)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  window.update_data = function(token) {
    window.db = new Firebase('https://coursegrapher.firebaseio.com/');
    TOKEN = token;
    return departments(depts_callback);
  };

}).call(this);
