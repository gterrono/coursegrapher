// Generated by CoffeeScript 1.4.0
(function() {

  window.db = new Firebase('https://coursegrapher.firebaseio.com/');

  window.database = {};

  window.departments_received = 0;

  window.revs = function(data, options) {
    var c, category, course, courses, dept, dept_name, name, obj, val, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    departments_received++;
    dept_name = options.dept;
    dept = database[dept_name];
    _ref = data.values;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      courses = (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = obj.section.aliases;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          if (c.indexOf(dept_name) === 0) {
            _results.push(c.split('-')[1]);
          }
        }
        return _results;
      })();
      for (_j = 0, _len1 = courses.length; _j < _len1; _j++) {
        course = courses[_j];
        if (!dept[course]) {
          dept[course] = {
            reviews: [],
            totals: {},
            averages: {}
          };
        }
        c = dept[course];
        c.reviews.push(obj.ratings);
        _ref1 = obj.ratings;
        for (category in _ref1) {
          val = _ref1[category];
          if (!(category in c.totals)) {
            c.totals[category] = {
              sum: 0,
              num: 0
            };
          }
          c.totals[category].sum += parseFloat(val);
          c.totals[category].num++;
        }
      }
    }
    dept.num = 0;
    for (name in dept) {
      c = dept[name];
      _ref2 = c.totals;
      for (category in _ref2) {
        val = _ref2[category];
        c.averages[category] = val.sum / val.num;
        if (!(category in dept.totals)) {
          dept.totals[category] = {
            sum: 0,
            num: 0
          };
        }
        dept.totals[category].sum += c.averages[category];
        dept.totals[category].num++;
      }
      delete c.totals;
      delete c.reviews;
      dept.num++;
    }
    _ref3 = dept.totals;
    for (category in _ref3) {
      val = _ref3[category];
      dept.averages[category] = val.sum / val.num;
    }
    delete dept.totals;
    db.update(_.pick(database, dept_name));
    if (departments_fetched === departments_received) {
      return console.log("Done: " + departments_received + " departments processed");
    }
  };

  window.departments_fetched = 0;

  window.depts = function(data, options) {
    var d, _i, _len, _ref, _results;
    if (options == null) {
      options = {};
    }
    _ref = data.values;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      if (!(d.id in database)) {
        departments_fetched++;
        options.dept = d.id;
        database[d.id] = {
          totals: {},
          averages: {},
          name: d.name
        };
        _results.push(dept_reviews(d.id, revs, _.clone(options)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  google.load('visualization', '1', {
    'packages': ['motionchart']
  });

  window.drawChart = function() {
    var data;
    data = new google.visualization.DataTable();
    data.addColumn('string', 'Major');
    data.addColumn('date', 'Date');
    data.addColumn('number', 'Instructor Quality');
    data.addColumn('number', 'Difficulty');
    data.addColumn('number', 'Course Quality');
    data.addColumn('number', 'Ability to Stimulate Interest');
    data.addColumn('number', 'Access to Instructor');
    data.addColumn('number', 'Amount Learned');
    data.addColumn('number', 'Amount of Work');
    data.addColumn('number', 'Instructor\'s Communication');
    data.addColumn('number', 'Recommended for Majors');
    data.addColumn('number', 'Recommended for Non-Majors');
    data.addColumn('number', 'Number of Reviews');
    return db.on('value', function(snapshot) {
      var a, chart, k, options, row, v;
      row = function(id, dept) {
        var get;
        if (dept.num == null) {
          return null;
        }
        get = function(field) {
          return dept.averages[field] || 0;
        };
        return ["" + dept.name + " (" + id + ")", new Date(2011, 0, 1), get('rInstructorQuality'), get('rDifficulty'), get('rCourseQuality'), get('rStimulateInterest'), get('rInstructorAccess'), get('rAmountLearned'), get('rWorkRequired'), get('rCommAbility'), get('rRecommendMajor'), get('rRecommendNonMajor'), dept.num];
      };
      a = (function() {
        var _ref, _results;
        _ref = snapshot.val();
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(row(k, v));
        }
        return _results;
      })();
      data.addRows(_.filter(a, _.isArray));
      chart = new google.visualization.MotionChart(document.getElementById('chart_div'));
      options = {};
      options['state'] = '{"showTrails":true,"playDuration":15000,"iconType":"BUBBLE","xLambda":1,"yZoomedDataMin":null,"xZoomedDataMin":null,"yLambda":1,"yZoomedIn":false,"nonSelectedAlpha":0.4,"orderedByY":false,"uniColorForNonSelected":false,"xZoomedIn":false,"time":"notime","yAxisOption":"3","xZoomedDataMax":null,"dimensions":{"iconDimensions":["dim0"]},"sizeOption":"12","duration":{"multiplier":1,"timeUnit":"D"},"yZoomedDataMax":null,"xAxisOption":"2","iconKeySettings":[],"orderedByX":false,"colorOption":"4"};';
      options['showYScalePicker'] = false;
      options['showXScalePicker'] = false;
      options['width'] = 950;
      options['height'] = 450;
      chart.draw(data, options);
      google.visualization.events.addListener(chart, 'statechange', function(e) {
        var dept, longtitle, m, pat, state;
        if (chart.getState() !== null) {
          return;
        }
        state = JSON.parse(chart.getState());
        longtitle = state.iconKeySettings[0].key.dim0;
        pat = /[(]([\w]{1,5})[)]$/;
        m = longtitle.match(pat);
        dept = m[1];
        return window.location = '/course/' + dept;
      });
      return console.log('drawn');
    });
  };

  google.setOnLoadCallback(drawChart);

}).call(this);
